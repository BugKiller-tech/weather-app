import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';

import { Paper, TextField, RaisedButton, Snackbar, IconButton } from 'material-ui';
import Spinner from 'react-spinkit';
import ReactTable from 'react-table';
import 'react-table/react-table.css';

import { confirmAlert } from 'react-confirm-alert';
import 'react-confirm-alert/src/react-confirm-alert.css';

import { fetchAllWeatherStations } from '../../../actions/weather-stations';

import api from '../../../api';

class DataPoints extends Component {

  state = {
    errors: {},
    loading: false,

    snackbarOpen: false,
    snackMessage: ''
  }

  componentDidMount = () => {
    
  }
  

  onSubmit = () => {
    
  }


  render () {
    const { errors, isEditMode } = this.state;
    const stationColumns = [
      {
        Header: 'Username',
        accessor: 'username'
      },
      {
        Header: 'Password',
        accessor: 'password'
      },
      {
        Header: 'Auto Generated?',
        accessor: 'isAutoGenerated',
        Cell: props => <div>
          { props.value ? 'YES' : 'NO' }
        </div>
      },
      {
        Header: 'Action',
        accessor: '_id',
        Cell: props => <div>
          { !props.original.isAutoGenerated && 
            (<IconButton iconClassName="material-icons" onClick={() => { this.deleteAction(props.value) }}>delete</IconButton>)
          }
          <IconButton iconClassName="material-icons" onClick={() => { this.editAccount(props.value) }}>mode_edit</IconButton>
        </div>
      }
    ]
    return (
      <div className='ftp-accounts'>
        <Snackbar
          open={this.state.snackbarOpen}
          message={this.state.snackMessage}
          autoHideDuration={5000}
          onRequestClose={() => { this.setState({ snackbarOpen: false }) }}
        />
        <div className="container-fluid">
          <div className="row mt-3">
            <div className="col-md-12">
              <Paper style={{ minHeight: '35vh', padding: '20px' }}>
                <h3>Add Data Point</h3>
                <div>
                  <TextField 
                    hintText="Username" type="text" floatingLabelText="Username"
                    name="username"
                    errorStyle={{ float: 'left' }}
                    errorText={ errors.username ? errors.username : '' }
                    onChange={ (e) => { this.setState({ username: e.target.value }) }}
                    value={ this.state.username }
                    fullWidth={true}
                  />
                  <TextField 
                    hintText="Password" type="password" floatingLabelText="Password" 
                    name="password" 
                    errorStyle= {{ float: "left" }}
                    errorText = { errors.password ? errors.password : '' }
                    onChange={ (e) => { this.setState({ password: e.target.value }) } } 
                    value={this.state.password}
                    fullWidth={true}
                    />
                  <div className="text-center mt-3">
                    <RaisedButton label={ isEditMode ? 'Save Changes' : 'Create Weather Station' } primary={true} fullWidth={true} onClick={this.onSubmit} /> &nbsp; &nbsp;
                    { isEditMode ? <RaisedButton label="Cancel" primary={false} fullWidth={true} onClick={ this.cancelEdit } /> : '' }
                    <br/>
                    { this.state.loading ? (<Spinner name="wave" style={{ display: 'inline-block' }} />) : '' }
                  </div>
                </div>
              </Paper>
            </div>
          </div>
        </div>
      </div>
    )
  }
}

DataPoints.propTypes = {
  fetchAllWeatherStations: PropTypes.func.isRequired,
}
const mapStateToProps = (state, ownProps) => {
  return {
    stations: state.stations.stations
  }
}

export default connect(mapStateToProps, { fetchAllWeatherStations })(DataPoints);