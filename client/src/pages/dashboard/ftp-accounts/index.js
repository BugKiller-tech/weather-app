import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';

import { Paper, TextField, RaisedButton, Snackbar, IconButton } from 'material-ui';
import Spinner from 'react-spinkit';
import { fetchAllFtpAccounts } from '../../../actions/ftps';

import ReactTable from 'react-table';
import 'react-table/react-table.css';

import { confirmAlert } from 'react-confirm-alert';
import 'react-confirm-alert/src/react-confirm-alert.css';

import api from '../../../api';
import './style.css';
import * as moment from 'moment';

class FtpAccounts extends Component {

  state = {
    username: '',
    password: '',
    
    isEditMode: false,
    selectedFtpId: '',
    
    errors: {},
    loading: false,

    snackbarOpen: false,
    snackMessage: ''
  }

  componentDidMount = () => {
    this.fetchAllFtps();
  }
  fetchAllFtps = () => {
    this.props.fetchAllFtpAccounts();
  }

  onSubmit = () => {
    const errors = {}
    if (this.state.username == '') { errors.username = 'Please input the username' }
    if (this.state.password == '') { errors.password = 'Please input the ftp password' }
    this.setState({ errors });
    if (Object.keys(errors).length > 0 ) { return }

    this.setState({ loading: true });
    if (this.state.isEditMode) {
      api.updateFtpAccount({
        _id: this.state.selectedFtpId,
        username: this.state.username,
        password: this.state.password
      })
      .then(res => {
        this.setState({ 
          username: '',
          password: '',
          selectedFtpId: '',
          isEditMode: false,
          errors: {},
          loading: false, 
          snackMessage: 'Successfully updated!', 
          snackbarOpen: true 
        });
        this.fetchAllFtps();
      })
      .catch(err => {
        this.setState({ 
          loading: false,
          snackMessage: err.response.data.message,
          snackbarOpen: true,
        })
      })
    } else {
      api.createFtpAccount({
        username: this.state.username,
        password: this.state.password
      })
      .then(res => {
        this.setState({ 
          username: '',
          password: '',
          errors: {},
          loading: false, 
          snackMessage: 'Successfully created', 
          snackbarOpen: true 
        });
        this.fetchAllFtps();
      })
      .catch(err => {
        this.setState({ 
          loading: false,
          snackMessage: err.response.data.message,
          snackbarOpen: true,
        })
      })
    }
  }

  deleteAction = (_id) => {
    confirmAlert({
      title: 'Confirm',
      message: 'Do you want to remove this ftp accont?',
      buttons: [
        {
          label: 'Yes',
          onClick: () => {
            this.deleteAccount(_id);
          }
        },
        {
          label: 'No',
          onClick: () => {}
        }
      ]
    })
  }
  deleteAccount = (_id) => {
    api.deleteFtpAccount({
      _id
    })
    .then(res => {
      this.setState({
        snackMessage: 'Successfully removed',
        snackbarOpen: true,
      })
      this.fetchAllFtps();
    })
  }
  cancelEdit = () => {
    this.setState({
      username: '',
      password: '',
      selectedFtpId: '',
      isEditMode: false,
      errors: {}
    })
  }
  editAccount = (_id) => {
    this.props.ftps.filter(ftp => {
      if (ftp._id == _id) {
        this.setState({
          username: ftp.username,
          password: ftp.password,
          selectedFtpId: _id,
          isEditMode: true,
          errors: {}
        })
      }
    })
  }


  render () {
    const { errors, isEditMode } = this.state;
    const ftpColumns = [
      {
        Header: 'Username',
        accessor: 'username'
      },
      {
        Header: 'Password',
        accessor: 'password', 
        Cell: props => <div>
          <button className="btn btn-sm btn-secondary" onClick={ () => { alert(props.value); } }>View Password</button>
        </div>
      },
      {
        Header: 'Relative Path',
        accessor: 'relative_path',
      },
      {
        Header: 'Created',
        accessor: 'createdAt',
        Cell: props => <div>
          { moment(props.value).format('MMMM Do YYYY') }
        </div>
      },
      {
        Header: 'Auto Generated?',
        accessor: 'isAutoGenerated',
        Cell: props => <div>
          { props.value ? 'YES' : 'NO' }
        </div>
      },
      {
        Header: 'Action',
        accessor: '_id',
        Cell: props => <div>
          { !props.original.isAutoGenerated && 
            (<IconButton iconClassName="material-icons" onClick={() => { this.deleteAction(props.value) }}>delete</IconButton>)
          }
          <IconButton iconClassName="material-icons" onClick={() => { this.editAccount(props.value) }}>mode_edit</IconButton>
        </div>
      }
    ]
    return (
      <div className='ftp-accounts'>
        <Snackbar
          open={this.state.snackbarOpen}
          message={this.state.snackMessage}
          autoHideDuration={5000}
          onRequestClose={() => { this.setState({ snackbarOpen: false }) }}
        />
        <div className="container-fluid">
          <div className="row mt-3">
            <div className="col-md-4">
              <Paper style={{ minHeight: '90vh', padding: '20px' }}>
                <h3>{this.state.isEditMode ? 'Edit Ftp Account' : 'Create Ftp Account' }</h3>
                <div>
                  <TextField 
                    hintText="Username" type="text" floatingLabelText="Username"
                    name="username"
                    errorStyle={{ float: 'left' }}
                    errorText={ errors.username ? errors.username : '' }
                    onChange={ (e) => { this.setState({ username: e.target.value }) }}
                    value={ this.state.username }
                    fullWidth={true}
                  />
                  <TextField 
                    hintText="Password" type="password" floatingLabelText="Password" 
                    name="password" 
                    errorStyle= {{ float: "left" }}
                    errorText = { errors.password ? errors.password : '' }
                    onChange={ (e) => { this.setState({ password: e.target.value }) } } 
                    value={this.state.password}
                    fullWidth={true}
                    />
                  <div className="text-center mt-3">
                    <RaisedButton label={ isEditMode ? 'Save Changes' : 'Register FTP account' } primary={true} fullWidth={true} onClick={this.onSubmit} /> &nbsp; &nbsp;
                    { isEditMode ? <RaisedButton label="Cancel" primary={false} fullWidth={true} onClick={ this.cancelEdit } /> : '' }
                    <br/>
                    { this.state.loading ? (<Spinner name="wave" style={{ display: 'inline-block' }} />) : '' }
                  </div>
                </div>
              </Paper>
            </div>
            <div className="col-md-8">
              <Paper style={{ minHeight: '90vh', padding: '20px' }}>
                <h3>All Ftp Accounts</h3>
                <ReactTable 
                  columns = {ftpColumns}
                  data={this.props.ftps}
                  defaultPageSize={10}
                  filterable={true}
                />
              </Paper>
            </div>
          </div>
        </div>
      </div>
    )
  }
}

FtpAccounts.propTypes = {
  fetchAllFtpAccounts: PropTypes.func.isRequired,
}
const mapStateToProps = (state, ownProps) => {
  return {
    ftps: state.ftps.ftps
  }
}

export default connect(mapStateToProps, { fetchAllFtpAccounts })(FtpAccounts);