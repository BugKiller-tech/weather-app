const randomstring = require('randomstring');
const FtpAccount = require('../models/FtpAccount');
const WeatherStation = require('../models/WeatherStation');

module.exports = {
  create: async (req, res) => {
    try {
      var username = '';
      while(true) {
        username = randomstring.generate({length: 10, charset: 'numeric' });
        const ftp1 = await FtpAccount.findOne({ username: username });
        if (!ftp1) break;
      }
      const password = randomstring.generate({ length: 10, charset: 'alphabetic' });
      const ftpAccount = await FtpAccount.create({
        username: username,
        password: password,
        relative_path: req.body.code,
        isAutoGenerated: true
      });
      if (!ftpAccount) {
        return res.status.json({ message: 'can not create the ftp account!' })
      }

      const ws1 = await WeatherStation.findOne({ code: req.body.code });
      if (ws1) {
        return res.status(400).json({
          message: 'This code is already exist'
        })
      }
      const c = await WeatherStation.create({
        code: req.body.code,
        description: req.body.description,
        location: req.body.location,
        make: req.body.make,
        type: req.body.type,
        csv_data_format: req.body.csv_data_format,
        ftp: ftpAccount._id,
      });
      return res.json({
        message: 'Successfully created!'
      })

    } catch (err) {
      return res.status(400).json({
        message: 'something went wrong'
      })
    }
  },
  update: async (req, res) => {
    try {
      const ws1 = await WeatherStation.findOne({ _id: req.body._id });
      if (!ws1) {
        return res.status(400).json({
          message: 'can not find the weather station'
        })
      }
      ws1.code = req.body.code;
      ws1.description = req.body.description;
      ws1.location = req.body.location;
      ws1.make = req.body.make;
      ws1.type = req.body.type;
      ws1.csv_data_format = req.body.csv_data_format;

      const updated = await ws1.save();
      return res.json({
        message: 'Successfully updated!'
      })
    } catch( err) {
      return res.status(400).json({
        message: 'something went wrong'
      })
    }   
  },
  delete: async (req, res) => {
    try {
      const ws1 = await WeatherStation.findOne({ _id: req.body._id });
      if (!ws1) {
        return res.status(400).json({
          message: 'can not find the weather station'
        })
      }
      await FtpAccount.deleteOne({ _id: ws1.ftp });
      await WeatherStation.deleteOne({ _id: req.body._id });
      return res.json({
        message: 'Successfully deleted'
      })
    } catch( err) {
      return res.status(400).json({
        message: 'something went wrong'
      })
    }   
  },
  all: async (req, res) => {
    try {
      const stations = await WeatherStation.find({}).sort({ 'createdAt': -1 }).lean().populate('ftp');
      return res.json({
        message: 'Successfully fetched',
        stations
      })
    } catch(err) {
      return res.status(400).json({
        message: 'something went wrong'
      })
    }

  },
}